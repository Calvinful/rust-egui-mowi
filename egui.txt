----properties-----
[package]
name = "mow"
version = "0.1.0"
edition = "2021"

[dependencies]
eframe = { version = "0.29.1", features = ["persistence"] }
egui = "0.29.1"
serde = { version = "1.0.216", features = ["derive"] }
serde_json = "1.0.133"

----------project files-----------

src//ui.rs
--------------------------------
\n
--------------------------------
src//program_table/mod.rs
--------------------------------
pub mod program;
pub mod program_table;
\n
--------------------------------
src//program_table/program_table.rs
--------------------------------
use crate::View;
use egui::{TextStyle, TextWrapMode};
use super::program::Program;
use egui;


#[derive(serde::Deserialize, serde::Serialize)]
pub struct ProgramTable{
    program_list: Vec<Program>
}
impl View for ProgramTable { 
   fn ui(&mut self, ui: &mut egui::Ui){
        
   }
}


impl Default for ProgramTable{
    fn default() -> Self {
        Self{
            program_list: Vec::new()
        }
    }

}
\n
--------------------------------
src//program_table/program.rs
--------------------------------



#[derive( serde::Serialize, serde::Deserialize)]
pub struct Program{
    name: String,
    localPort: i32,
    hostPort: i32,
    hostIp: String
}
\n
--------------------------------
src//menu/ui.rs
--------------------------------
\n
--------------------------------
src//menu/menu_bar.rs
--------------------------------
use crate::View;
use egui;
#[derive( serde::Serialize, serde::Deserialize)]
pub struct Item {
    name: String,
    page_link: String
}

#[derive( serde::Serialize, serde::Deserialize)]
pub struct MainMenu {
    items: Vec<Item>
}

impl View for MainMenu {
    fn ui(&mut self, ui: &mut egui::Ui) {
        ui.menu_button("File", |ui| {
            MainMenu::nested_menus(ui);
        });

        ui.menu_button("Edit", |ui| {
            if ui.button("Cut").clicked() {
                ui.close_menu();
            }
            if ui.button("Copy").clicked() {
                ui.close_menu();
            }
            if ui.button("Paste").clicked() {
                ui.close_menu();
            }
        });

        ui.menu_button("Help", |ui| {
            if ui.button("About").clicked() {
                ui.close_menu();
            }
        });
    }
}

impl MainMenu {
    pub(super) fn nested_menus(ui: &mut egui::Ui) {
        ui.set_max_width(200.0);
        if ui.button("Open…").clicked() {
            ui.close_menu();
        }

        ui.menu_button("Recent Files", |ui| {
            ui.menu_button("Project 1", |ui| {
                if ui.button("Open").clicked() {
                    ui.close_menu();
                }
                ui.button("Remove from list");
            });

            ui.menu_button("Project 2", |ui| {
                if ui.button("Open").clicked() {
                    ui.close_menu();
                }
                ui.button("Remove from list");
            });

            ui.button("Clear Recent");
            if ui.button("Browse...").clicked() {
                ui.close_menu();
            }
        });

        if ui.button("Save").clicked() {
            ui.close_menu();
        }
        if ui.button("Save As...").clicked() {
            ui.close_menu();
        }
        ui.separator();
        if ui.button("Exit").clicked() {
            ui.close_menu();
        }
    }
}





\n
--------------------------------
src//menu/mod.rs
--------------------------------
pub mod ui;
pub mod menu_bar;







\n
--------------------------------
src//main.rs
--------------------------------
use serde_json;
use eframe::{egui, App, Storage};
mod menu;
mod program_table;


use program_table::program::Program;
//use menu::menu_bar::{MainMenu, Item};  // Import both MainMenu and Item

#[derive(Default, serde::Serialize, serde::Deserialize)]
struct MowApp {
    global_state: GlobalState
}

#[derive(Default, serde::Serialize, serde::Deserialize)]
struct GlobalState{
    counter: i32,
    programs: Vec<Program>
}


pub trait View {
    fn ui(&mut self, ui: &mut egui::Ui);
}



impl App for MowApp {
    fn update(&mut self, ctx: &egui::Context, _: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {

            ui.label(format!("Counter: {}", &mut self.global_state.counter));
            if ui.button("Increment").clicked() {
                self.global_state.counter += 1;
            }
        });
    }

fn save(&mut self, storage: &mut dyn Storage) {
        if let Ok(state) = serde_json::to_string(self) {
            storage.set_string("app_state", state);
        }
    }

}

impl MowApp {
    fn load(storage: Option<&dyn Storage>) -> Self {
        if let Some(storage) = storage {
            if let Some(state) = storage.get_string("app_state") {
                if let Ok(app) = serde_json::from_str::<Self>(&state) {
                    return app;
                }
            }
        }
        Self::default()
    }
}



fn main() {
    let options = eframe::NativeOptions::default();
    if let Err(e) = 
        eframe::run_native(
             "MowApp",
            options,
            Box::new(|cc| {
                 Ok(Box::new(MowApp::load(cc.storage)))
             }),
        ){
            eprintln!("Failed to run the application: {}", e);
            std::process::exit(1);
        };
}
\n
--------------------------------
THE PROJECT IS FORMATTED LIKE SO:
.
├──src
│  ├──main.rs
│  └───menu
│      ├──mod.rs
│      ├──utils.rs
│      └──ui.rs
├──Cargo.toml
└──...

